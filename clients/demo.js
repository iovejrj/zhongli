// Generated by CoffeeScript 1.3.3

$(function() {
  var check_same, draw_item, error_handler, f2, home_scrolltop, jump_home, last, level, now, old_clock, point, put_same, sayit, topics, view, warning;
  window.socket = io.connect('127.0.0.1:8000/chat');
  warning = void 0;
  error_handler = function(data) {
    if (warning != null) {
      clearTimeout(warning);
    }
    return (function() {
      $('#warning').text(data.info);
      $('.alert').slideDown();
      return warning = setTimeout((function() {
        return ($('.alert')).slideUp();
      }), 1000);
    })();
  };
  socket.on('has-error', error_handler);
  if (localStorage.name != null) {
    socket.emit('set-name', {
      name: localStorage.name.trim()
    });
    $('#name').val(localStorage.name.trim());
  }
  $('#name').bind('input', function() {
    socket.emit('set-name', {
      name: $('#name').val().trim()
    });
    return localStorage.name = $('#name').val().trim();
  });
  view = 'home';
  last = '';
  point = [];
  level = 0;
  check_same = function(a, b) {
    var an, bn, fine, head, n, _i, _results;
    an = a.length;
    bn = b.length;
    n = an < bn ? an : bn;
    fine = true;
    head = -1;
    (function() {
      _results = [];
      for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(i) {
      if (fine && a[i] === b[i]) {
        return head = i;
      } else {
        return fine = false;
      }
    });
    return [head, b.slice(head + 1)];
  };
  $('#say').bind('input', function() {
    var head, text, _ref;
    if (view !== 'home') {
      _ref = check_same(last, $('#say').val()), head = _ref[0], text = _ref[1];
      socket.emit('sync-post', {
        head: head,
        text: text
      });
      return last = $('#say').val();
    }
  });
  sayit = function(e) {
    if ($('#say').val().trim().length === 0) {
      error_handler({
        info: 'cant send black'
      });
    } else if (view === 'home') {
      socket.emit('add-topic', {
        text: $('#say').val().trim()
      });
    } else {
      socket.emit('add-post', {
        text: $('#say').val().trim()
      });
    }
    $('#say').val('');
    return last = '';
  };
  $('#say').keydown(function(e) {
    if (e.keyCode === 13) {
      return sayit();
    }
  });
  $('#send').click(function() {
    return sayit();
  });
  draw_item = function(item, link) {
    $('<li/>').attr('id', item.mark).attr('class', 'item').appendTo($('#list'));
    $('#' + item.mark).html("      <span class='time'>" + item.date + " " + item.time + "</span>      <span class='name'>" + item.name + "</span><br>      <span class='text' id='post" + item.mark + "'>" + item.text + "</span>");
    if (link === true) {
      return $('#' + item.mark).click(function() {
        socket.emit('post-list', {
          mark: item.mark
        });
        $('#topic').text(item.text);
        last = '';
        $('#say').val('');
        return view = item.mark;
      });
    }
  };
  topics = [];
  socket.on('add-topic', function(item) {
    draw_item(item, true);
    return topics.push(item);
  });
  home_scrolltop = 0;
  $('#list').bind('scroll', function() {
    if (view === 'home') {
      return home_scrolltop = $('#list').scrollTop();
    }
  });
  if (localStorage.name != null) {
    $('#say').focus();
  } else {
    $('#name').focus();
  }
  socket.emit('topic-list');
  socket.on('topic-list', function(list) {
    var _i, _results;
    topics = list.reverse();
    topics.forEach(function(item) {
      return draw_item(item, true);
    });
    point = $('#list').children().first();
    (function() {
      _results = [];
      for (var _i = 0; 0 <= level ? _i < level : _i > level; 0 <= level ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function() {
      return point = point.next();
    });
    return point.addClass('point');
  });
  jump_home = function() {
    var _i, _results;
    view = 'home';
    $('#list').html('');
    topics.forEach(function(item) {
      return draw_item(item, true);
    });
    last = '';
    $('#say').val('');
    $('#topic').text('');
    socket.emit('leave-topic');
    $('#list').scrollTop(home_scrolltop);
    point = $('#list').children().first();
    (function() {
      _results = [];
      for (var _i = 0; 0 <= level ? _i < level : _i > level; 0 <= level ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function() {
      return point = point.next();
    });
    return point.addClass('point');
  };
  $('#home').click(jump_home);
  socket.on('post-list', function(list) {
    $('#list').html('');
    return list.reverse().forEach(draw_item);
  });
  put_same = function(diff, base) {
    var n, res, _i, _results;
    if (base.length <= diff.head) {
      n = diff.head - base.length;
      res = diff.text;
      (function() {
        _results = [];
        for (var _i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(i) {
        return res = 'ᖘ' + res;
      });
      return res;
    } else if (diff.head < 0) {
      return diff.text;
    } else {
      return base.slice(0, diff.head + 1 || 9e9) + diff.text;
    }
  };
  socket.on('sync-post', function(data) {
    var item;
    if (view !== 'home') {
      if ($('#post' + data.mark).length === 0) {
        item = {
          name: 'ᖘᖘᖘ',
          date: 'ᖘᖘ-ᖘᖘ',
          time: 'ᖘᖘ:ᖘᖘ',
          text: '',
          mark: data.mark
        };
        draw_item(item);
      }
      return $('#post' + data.mark).text(put_same(data, $('#post' + data.mark).text()));
    }
  });
  socket.on('new-post', function(item) {
    return draw_item(item);
  });
  now = new Date();
  $('#date').text("" + (now.getMonth() + 1) + "/" + (now.getDate()));
  $('#clock').text("" + (now.getHours()) + ":" + (now.getMinutes()));
  f2 = function(num) {
    if (num < 10) {
      return '0' + (String(num));
    } else {
      return String(num);
    }
  };
  old_clock = setInterval((function() {
    var d;
    now = new Date();
    d = {
      hour: now.getHours(),
      min: now.getMinutes()
    };
    return $('#clock').text((f2(d.hour)) + ':' + (f2(d.min)));
  }), 800);
  return $(document).keydown(function(e) {
    console.log(e.keyCode);
    if (e.keyCode === 9) {
      $('#say').focus();
      return false;
    } else if (e.keyCode === 38) {
      $('#list').scrollTop($('#list').scrollTop() - 60);
      if (point.prev().length !== 0) {
        point.removeClass('point');
        point = point.prev();
        level -= 1;
        point.addClass('point');
      }
      return false;
    } else if (e.keyCode === 40) {
      $('#list').scrollTop($('#list').scrollTop() + 60);
      if (point.next().length !== 0) {
        point.removeClass('point');
        point = point.next();
        level += 1;
        point.addClass('point');
      }
      return false;
    } else if (e.keyCode === 27) {
      if (view === 'home') {
        point.click();
      } else {
        jump_home();
      }
      return false;
    }
  });
});
